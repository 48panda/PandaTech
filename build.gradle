buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
plugins {
    id 'eclipse'
    id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

version = '0.00.01'
group = 'com._48panda.tech' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
//archivesBaseName = 'PandaTech'

static Set<String> allOres() { return Set.of ('coal', 'copper', 'iron', 'gold', 'lapis', 'redstone', 'diamond', 'emerald',
        'tin', 'zinc', 'cobalt', 'nickel', 'titanium', 'aluminium') }
static Set<String> hasRaw() { return Set.of ('copper', 'iron', 'gold') }
static Set<String> hasOre() { return Set.of('coal', 'copper', 'iron', 'gold', 'lapis', 'redstone', 'diamond', 'emerald')}
static Set<String> hasDust() { return Set.of ('redstone') } // (in vanilla minecraft)
static Set<String> hasIngotOfAnyType() { return Set.of('coal', 'copper', 'iron', 'gold', 'lapis', 'redstone', 'diamond', 'emerald')}
static Set<String> isIngot() { return Set.of ('copper', 'iron', 'gold',
        'tin', 'zinc', 'cobalt', 'nickel', 'titanium', 'aluminium') }
static Set<String> hasPlate() {return Set.of('copper', 'iron', 'gold', 'lapis', 'redstone', 'diamond', 'emerald',
        'tin', 'zinc', 'cobalt', 'nickel', 'titanium', 'aluminium')} //Not in vanilla, is being added
static Set<String> isLazuli() { return Set.of ('lapis') }
static Set<String> doesNotHaveIngot() { return Set.of ('redstone') }

static String getDustId(String name) {
    return (hasDust().contains(name) ? "minecraft" : "panda_tech") + ":" + name + (hasDust().contains(name) ? "" : "_dust")
}

static String getIngotId(String name) {
    return (hasIngotOfAnyType().contains(name)?"minecraft:":"panda_tech:") + getIngot(name)
}
static String getIngot(String name) {
    return isIngot().contains(name) ? name + "_ingot" : isLazuli().contains(name) ? name + "_lazuli" : name
}

static String getRawBlockId(String name) {
    return getRawId(name) + "_block"
}
static String getRawId(String name) {
    return (hasRaw().contains(name) ? "minecraft" : "panda_tech") + ":raw_" + name
}
static String getPlateId(String name, boolean withColon) {
    return (withColon?"panda_tech:":"")+name+"_plate"
}
static String getRawBlockIdWithoutColon(String name) {
    return getRawIdWithoutColon(name) + "_block"
}
static String getRawIdWithoutColon(String name) {
    return "raw_" + name
}

static String getRawRecipeId(String name) {
    return (hasRaw().contains(name) ? "minecraft" : "panda_tech") + ":" + (hasRaw().contains(name) ? "raw_" : "") + name + (hasRaw().contains(name) ? "":"_raw_to_block")
}

static String getRawBlockRecipeId(String name) {
    return (hasRaw().contains(name) ? "minecraft" : "panda_tech") + ":" + (hasRaw().contains(name) ? "raw_" : "") + name + (hasRaw().contains(name) ? "_block":"_block_to_ingot")
}

static String getOreId(String name, boolean withColon, boolean isDeepslate) {
    return (withColon?(hasOre().contains(name) ? "minecraft" : "panda_tech") + ":":"") + (isDeepslate ? "deepslate_" : "") + name + "_ore"
}

task generateResources() {
    File minecraftRecipeDirectory = new File (buildDir, '/generatedResources/data/minecraft/recipes')
    File myBlockModelDirectory = new File (buildDir, '/generatedResources/assets/panda_tech/models/block')
    File myItemModelDirectory = new File (buildDir, '/generatedResources/assets/panda_tech/models/item')
    File blockstateDirectory = new File (buildDir, '/generatedResources/assets/panda_tech/blockstates')
    File lootTableDirectory = new File (buildDir, '/generatedResources/data/panda_tech/loot_tables/blocks')
    File myRecipeDirectory = new File (buildDir, '/generatedResources/data/panda_tech/recipes')
    File myEntryDirectory = new File (buildDir, '/generatedResources/data/panda_tech/patchouli_books/panda_tech_guide/en_us/entries')
    File resources = new File ('buildscript_resources')
    
    doLast {
        minecraftRecipeDirectory.mkdirs()
        myBlockModelDirectory.mkdirs()
        myItemModelDirectory.mkdirs()
        blockstateDirectory.mkdirs()
        lootTableDirectory.mkdirs()
        myRecipeDirectory.mkdirs()
        myEntryDirectory.mkdirs()
        def lines = new File('crafting_recipes_to_ignore.txt').text.readLines()
        for (line in lines) {
            new File(minecraftRecipeDirectory, line).text = '{}'
        }
        
        List<String> needsDust2Ingot = allOres().stream().filter(x->!(doesNotHaveIngot().contains(x))).toList()
        def basic = new File(resources, 'dust_to_ingot.json').text
        for (ore in needsDust2Ingot) {
            new File(myRecipeDirectory, ore + ".json").text = basic
                    .replace("INGOT_ID", getIngotId(ore))
                    .replace("DUST_ID", getDustId(ore))
                    .replace("INGOT", getIngot(ore))
        }
        
        List<String> needsDustItemModel = allOres().stream().filter(x->!(hasDust().contains(x))).toList()
        basic = new File(resources, "item_model.json").text
        for (ore in needsDustItemModel) {
            new File(myItemModelDirectory, ore + "_dust.json").text = basic
                    .replace("ITEM_ID_WITHOUT_COLON", ore+"_dust")
        }

        List<String> needsRawItemModel = allOres().stream().filter(x->!(hasRaw().contains(x))).toList()
        for (ore in needsRawItemModel) {
            new File(myItemModelDirectory, "raw_" + ore + ".json").text = basic
                    .replace("ITEM_ID_WITHOUT_COLON", "raw_"+ore)
        }

        List<String> needsIngotItemModel = allOres().stream().filter(x->!(hasIngotOfAnyType().contains(x))).toList()
        for (ore in needsIngotItemModel) {
            new File(myItemModelDirectory, ore + "_ingot.json").text = basic
                    .replace("ITEM_ID_WITHOUT_COLON", ore+"_ingot")
        }
        
        List<String> needsRaw2Dust = allOres().stream().toList()
        basic = new File(resources, 'raw_to_dust.json').text
        def basic2 = new File(resources, 'ore_entry.json').text
        def basic3 = new File(resources, "smelt_raw.json").text
        for (String ore: needsRaw2Dust) {
            new File(myRecipeDirectory, ore + "_raw_to_dust.json").text = basic
                .replace("DUST_ID", getDustId(ore))
                .replace("RAW_ID", getRawId(ore))
            new File(myEntryDirectory, ore + "_entry.json").text = basic2
                    .replace("CAPITAL_ORE_NAME", ore.capitalize())
                    .replace("RAW_RECIPE", getRawRecipeId(ore))
                    .replace("RAW_BLOCK_RECIPE", getRawBlockRecipeId(ore))
                    .replace("RAW_BLOCK_ID", getRawBlockId(ore))
                    .replace("INGOT_ID", getIngotId(ore))
                    .replace("DUST_ID", getDustId(ore))
                    .replace("RAW_ID", getRawId(ore))
            new File(myRecipeDirectory, ore + "_smelt_raw_to_dust.json").text = basic3
                    .replace("DUST_ID", getDustId(ore))
                    .replace("RAW_ID", getRawId(ore))
        }
        
        basic = new File(resources, "plate_craft.json").text
        basic2 = new File(resources, "item_model.json").text
        for (ore in hasPlate().toList()) {
            new File(myRecipeDirectory, ore+"_plate_craft.json").text = basic
                    .replace("INGOT_ID", getIngotId(ore))
                    .replace("PLATE_ID", getPlateId(ore, true))
            new File(myItemModelDirectory, ore+"_plate.json").text = basic2
                    .replace("ITEM_ID_WITHOUT_COLON", getPlateId(ore, false))

        }
        
        List<String> needsOre = allOres().stream().filter(x->!(hasOre().contains(x))).toList()
        basic = new File(resources, "static_blockstate.json").text
        basic2 = new File(resources, "cube_model.json").text
        basic3 = new File(resources, "block_item_model.json").text
        def basic4 = new File(resources, "ore_loot_table.json").text
        for (ore in needsOre) {
            new File(blockstateDirectory, getOreId(ore, false, false)+".json").text = basic
                    .replace("BLOCK_ID_WITHOUT_COLON", getOreId(ore, false, false))
            new File(blockstateDirectory, getOreId(ore, false, true)+".json").text = basic
                    .replace("BLOCK_ID_WITHOUT_COLON", getOreId(ore, false, true))
            new File(myBlockModelDirectory, getOreId(ore, false, false)+".json").text = basic2
                    .replace("BLOCK_ID_WITHOUT_COLON", getOreId(ore, false, false))
            new File(myBlockModelDirectory, getOreId(ore, false, true)+".json").text = basic2
                    .replace("BLOCK_ID_WITHOUT_COLON", getOreId(ore, false, true))
            new File(myItemModelDirectory, getOreId(ore, false, false)+".json").text = basic3
                    .replace("BLOCK_ID_WITHOUT_COLON", getOreId(ore, false, false))
            new File(myItemModelDirectory, getOreId(ore, false, true)+".json").text = basic3
                    .replace("BLOCK_ID_WITHOUT_COLON", getOreId(ore, false, true))
            new File(lootTableDirectory, getOreId(ore, false, false)+".json").text = basic4
                    .replace("RAW_ID", getRawId(ore))
                    .replace("ORE_ID", getOreId(ore, true, false))
            new File(lootTableDirectory, getOreId(ore, false, true)+".json").text = basic4
                    .replace("RAW_ID", getRawId(ore))
                    .replace("ORE_ID", getOreId(ore, true, true))
        }
        

        List<String> needsBlock2Raw = allOres().stream().filter(x->!(hasRaw().contains(x))).toList()
        basic = new File(resources, 'raw_from_block.json').text
        basic2 = new File(resources, 'raw_to_block.json').text
        basic3 = new File(resources, "raw_block_loot_table.json").text
        basic4 = new File(resources, "static_blockstate.json").text
        def basic5 = new File(resources, "cube_model.json").text
        def basic6 = new File(resources, "block_item_model.json").text
        for (ore in needsBlock2Raw) {
            new File(myRecipeDirectory, ore + "_raw_to_block.json").text = basic
                    .replace("RAW_BLOCK_ID", getRawBlockId(ore))
                    .replace("RAW_ID", getRawId(ore))

            new File(myRecipeDirectory, ore + "_block_to_ingot.json").text = basic2
                    .replace("RAW_BLOCK_ID", getRawBlockId(ore))
                    .replace("RAW_ID", getRawId(ore))
            
            new File(lootTableDirectory, getRawBlockIdWithoutColon(ore) + ".json").text = basic3
                    .replace("RAW_BLOCK_ID", getRawBlockId(ore))

            new File(blockstateDirectory, getRawBlockIdWithoutColon(ore) + ".json").text = basic4
                    .replace("BLOCK_ID_WITHOUT_COLON", getRawBlockIdWithoutColon(ore))

            new File(myBlockModelDirectory, getRawBlockIdWithoutColon(ore)+".json").text = basic5
                    .replace("BLOCK_ID_WITHOUT_COLON", getRawBlockIdWithoutColon(ore))

            new File(myItemModelDirectory, getRawBlockIdWithoutColon(ore)+".json").text = basic6
                    .replace("BLOCK_ID_WITHOUT_COLON", getRawBlockIdWithoutColon(ore))
        }
    }
}

compileJava.dependsOn generateResources

jar {
    from new File(buildDir, '/generatedResources')
}

processResources {
    from new File(buildDir, '/generatedResources')
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://github.com/ParchmentMC/Parchment/wiki/Getting-Started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: '1.18.2'
    
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'examplemod'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'examplemod'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'examplemod'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }
    maven { url 'https://maven.blamejared.com' }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
}

mixin {
    // MixinGradle Settings
    add sourceSets.main, 'mixins.panda_tech.refmap.json'
    config 'mixins.panda_tech.json'

    debug.verbose = true
    debug.export = true
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.18.2-40.1.0'

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    // Real mod deobf dependency examples - these get remapped to your current mappings
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    compileOnly fg.deobf("vazkii.patchouli:Patchouli:1.18.2-66:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:1.18.2-66")

    compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")
    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "panda_tech",
                "Specification-Vendor"    : "48panda",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "48panda",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
